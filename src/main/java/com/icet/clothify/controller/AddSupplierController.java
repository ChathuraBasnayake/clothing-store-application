package com.icet.clothify.controller;

import com.icet.clothify.model.dto.SupplierDTO;
import com.icet.clothify.service.ServiceFactory;
import com.icet.clothify.service.custom.SupplierService;
import com.icet.clothify.util.ServiceType;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputControl;

import java.sql.SQLException;
import java.util.List;

import static com.icet.clothify.util.Util.alert;

public class AddSupplierController {

    @FXML
    private TextField supplierNameField;
    @FXML
    private TextField supplierCompanyField;
    @FXML
    private TextField supplierEmailField;
    @FXML
    private TextField supplierPhoneField;

    private SupplierService supplierService;

    @FXML
    public void initialize() {
        try {
            supplierService = ServiceFactory.getInstance().getServiceType(ServiceType.SUPPLIER);
        } catch (SQLException e) {
            alert(Alert.AlertType.ERROR, "Initialization Failed", "Could not connect to supplier service.");
            e.printStackTrace();
        }
    }

    @FXML
    void handleSaveSupplier(ActionEvent actionEvent) {
        // Perform validation before proceeding
        if (!supplierService.validateSupplierInputs(
                supplierNameField.getText(),
                supplierCompanyField.getText(),
                supplierEmailField.getText())) {
            return; // Validation failed, messages are shown by the service
        }

        try {
            SupplierDTO newSupplier = new SupplierDTO(
                    null, // ID will be auto-generated by the database
                    supplierNameField.getText(),
                    supplierCompanyField.getText(),
                    supplierEmailField.getText(),
                    supplierPhoneField.getText()
            );

            if (supplierService.add(newSupplier)) {
                alert(Alert.AlertType.INFORMATION, "Success", "New supplier has been saved successfully.");
                clearFields();
                // Note: You might want to notify the AddItemController to reload suppliers
            } else {
                alert(Alert.AlertType.ERROR, "Save Failed", "Could not save the supplier due to a system error.");
            }
        } catch (SQLException e) {
            alert(Alert.AlertType.ERROR, "Database Error", "Failed to save the supplier to the database.");
            e.printStackTrace();
        }
    }

    /**
     * Clears all input fields on the form. This can be called after a successful save
     * or by the main DashboardController when switching to this view.
     */
    public void clearFields() {
        // The service layer was handling this, but it's better controller logic.
        List<TextField> fields = List.of(supplierNameField, supplierCompanyField, supplierEmailField, supplierPhoneField);
        fields.forEach(TextInputControl::clear);
    }


}
